generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  first_name    String
  last_name     String
  email         String   @unique
  phone_number  String
  password      String
  role          Role     @default(customer)
  is_active     Boolean  @default(true)
  is_blocked    Boolean  @default(false)
  address       String?
  city          String?
  country       String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  // Relations
  restaurants   Restaurant[] @relation("owner_restaurants") // for admins/owners
  orders        Order[]
  invoices      Invoice[]
}

model Restaurant {
  id          String    @id @default(uuid())
  name        String
  description String?
  address     String
  city        String
  country     String
  owner_id    String
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt

  owner       User       @relation("owner_restaurants", fields: [owner_id], references: [id])
  menu_items  MenuItem[]
  orders      Order[]
}

model MenuItem {
  id            String     @id @default(uuid())
  restaurant_id String
  name          String
  description   String?
  price         Float
  category      String?
  is_available  Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now()) @updatedAt

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  order_items   OrderItem[]
}

model Order {
  id            String      @id @default(uuid())
  user_id       String
  restaurant_id String
  total_amount  Float
  status        OrderStatus @default(pending)
  placed_at     DateTime    @default(now())
  delivered_at  DateTime?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now()) @updatedAt

  user          User        @relation(fields: [user_id], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurant_id], references: [id])
  items         OrderItem[]
  invoice       Invoice?

  Delivery Delivery[]
}

model OrderItem {
  id        String   @id @default(uuid())
  order_id  String
  menu_item_id String
  quantity  Int
  price     Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  order     Order    @relation(fields: [order_id], references: [id])
  menu_item MenuItem @relation(fields: [menu_item_id], references: [id])
}

model Invoice {
  id           String      @id @default(uuid())
  order_id     String      @unique
  user_id      String
  invoice_number String   @unique
  amount       Float
  tax          Float      @default(0)
  discount     Float      @default(0)
  total_amount Float
  status       InvoiceStatus @default(pending)
  paid_at      DateTime?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now()) @updatedAt

  order        Order      @relation(fields: [order_id], references: [id])
  user         User       @relation(fields: [user_id], references: [id])
}

model Delivery {
  id           String      @id @default(uuid())
  order_id     String
  driver_name  String?
  status       DeliveryStatus @default(preparing)
  pickup_time  DateTime?
  delivery_time DateTime?
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now()) @updatedAt

  order        Order       @relation(fields: [order_id], references: [id])
}

enum Role {
  superadmin
  admin
  customer
}

enum OrderStatus {
  pending
  confirmed
  preparing
  out_for_delivery
  delivered
  cancelled
}

enum InvoiceStatus {
  pending
  paid
  overdue
  cancelled
}

enum DeliveryStatus {
  preparing
  picked_up
  on_the_way
  delivered
  cancelled
}
